@{
    Layout = "~/_Layout.cshtml";
    Page.Title = "Single Query";
    var searcharg = Request.Form["searcharg"];
    var regionid = "";
    var description = "";
    var theButton = Request.Form["formbutton"];

    // remember the 1st pass of the page, searcharg
    //  will be null BUT for the db query it needs to be
    //  a number
    if(string.IsNullOrEmpty(searcharg))
    {
        searcharg = "0";
    }

    // open a connection to the database use the connection
    //  string name attribute value
    var db = Database.Open("NWDB");

    // create your sql command that you wish to execute
    //  a placeholder @n will be used for the query argument
    // querry command can be coded on multiple physical lines
    var querycommand = "SELECT RegionID, RegionDescription "
             + "FROM Region "
             + "WHERE Region ID = @0";
    // execute the sql query command against the database
    // .QuerySingle() used when you expect a single record to be returned
    // .Query() Used when you expect 0,1, or more records to be returned
    // .QueryValue() used when you expect a single value (not record) to be returned
    var results = db.QuerySingle(querycommand, searcharg);
}
@section head{

    <link href="~/Content/MyCustomStyles.css" rel="stylesheet" />
}

@section banner{
    <h1>Database: Single Query</h1>
}

@if(IsPost)
{
    if(theButton.Equals("clear"))
    {
        regionid = "";
        description = "";
        searcharg = "0";
    }
    else
    {
        // .QuerySingle() uses == null to test for now results
        // .Query() uses .Count() == 0 to test for no results
        if(results == null)
        {
            // removing old results
            regionid = "";
            description = "";
            <p><span style="color:yellow">There is no region for the supplied region ID.</span></p>
        }
        else
        {
            // there is a record to display
            // how does one access the data on the record?

            // there are two ways to access a column on your record
            // a) using an index for the column eg. xxxx[index]
            // b) using the column title property name eg. xxxx.columnname

            // you must be concerned with non string datatypes being returned
            //  as part of your results.
            // output fields excpect strings.
            // var variables obtain their datatype when first used.
            regionid = results[0].ToString();
            description = results.RegionDescription;
        }
    }
}

    <form id="theForm" method="post">
        <div class="row">
            <div class="col-sm-4">
                <label for="searcharg">Enter Region ID: </label>
                <input type="number" id="searcharg" name="searcharg" placeholder="Enter Region ID:" value="@searcharg" />
                <br />
                <button type="submit" id="formbutton" name="formbutton" class="btn btn-primary" value="search">Search</button>
                &nbsp;&nbsp;
                <button type="submit" id="formbutton" name="formbutton" class="btn" value="clear">clear</button>
            </div>
            <div class="col-sm-8">
                <label for="regionid">Region ID: </label>
                <input type="text" id="regionid" name="regionid" value="@regionid" /> 
                <label for="description">Region Name: </label>
                <input type="text" id="description" name="description" value="@description" />
            </div>
        </div>
    </form>


@section footer{
    &copy; CPSC1517 Nait, all rights reservered
}
